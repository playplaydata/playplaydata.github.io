[{"title":"决战大数据","date":"2018-08-05T04:35:00.000Z","path":"2018/08/05/决战大数据/","text":"很久前就买了这本书，当时囫囵吞枣地读了一遍，感觉讲很飘，没什么收获。最近在“复盘”，就拿过来细细品读了。书，是一本好书，除了有点碎片化，串起来费劲了点。 作者先介绍了自己在阿里巴巴带团队的经历，给人的印象是做得很辛苦，但是很有收获：从无到有地缔造了强大的数据团队。在正文主要是讲数据分析人员的成长方式，思维方式，更多的是从道的角度来讲，细细品读，有种功力提升的感觉。 以下是思维导图：","tags":[{"name":"Reading","slug":"Reading","permalink":"http://yoursite.com/tags/Reading/"}]},{"title":"终身学习","date":"2018-06-17T09:46:12.000Z","path":"2018/06/17/终身学习/","text":"本书为罗胖2017年的杂文，十句有八句是谈认知升级的，主要是服务于自己的产品“得到”。书中提了很多观点，现在主要说三个。 1.阶层固化正在形成，但生活在中国仍大有可为。以教育为例，在美国教育资源是极度不均匀和固化的。进入常青藤名校读书有三条路：1)得有特长，尤其是体育特长，且要符合美国文化的标准，像击剑，高尔夫球等。这些项目其实是在挑选有钱人，需要金山银海堆出来的训练才能学得好。2)家长是校友，以便建设社区文化。3)捐款，一个族群捐得越多，入学比例越高。而在中国，自古华山一条路，把“高考”考好就能进好大学，就有机会改变自己的命运。很明显，我们的阶层流通并没有被堵死。 2.扩展知识的广度，用20%的精力学习80%的知识。对待知识的态度，不能像农耕民族，搞一块地，一天到晚地研究，最后熬成专家；应该像游牧民族，哪里水草丰美，就往哪里迁徙。因为社会变化剧烈，迭代很快，要跟得上时代的步伐就必须不断学习相应的新知识；而且，知识创新往往来自于多个领域的中间地带，在某个领域越精专的人越没办法跟外行人讲话。 3.学习知识要多做总结，多做缝合。对于刚学到的知识，它们是飘着的，并没有与已有的知识结构缝合在一起，所以忘得特别快，事倍功半。如果我们总结起来，将他们与已有的知识体系融合在一起，那才记得牢固，新知识才会真正变成自己的东西。 以下是思维导图：","tags":[{"name":"Reading","slug":"Reading","permalink":"http://yoursite.com/tags/Reading/"}]},{"title":"git 学习笔记","date":"2018-04-30T07:55:01.000Z","path":"2018/04/30/git-learn/","text":"安装git1234sudo apt-get install git # 安装gitgit config --global user.name &apos;My Name&apos; # 设置名字git config --global user.email &apos;email@example.com&apos;git config --all # 列出当前所有参数 创建git1234git init # 初始化,将当前目录变成Git可以管理的仓库ls -ah # 查看隐藏目录，有 .git 目录git add &lt;file&gt; # 可添加多个文件git commit -m &apos;explanation&apos; # 添加解释 版本恢复1234567891011git status # 查看文件修改了是否未提交git diff &lt;file&gt; # 查看文件修改了哪些地方git log # 查看 历史提交记录git log --pretty=oneline # 提交记录，只显示关键信息git reset --hard HEAD^ # 回退到上一个版本git reset --hard 3628164 # 根据commit id 恢复到指定的版本git reflog # 查看命令历史git reset HEAD &lt;file&gt; # 将缓存区的撤回到工作区，相当于撤销 git add 命令git checkout --&lt;file&gt; # 版本库里的版本替换工作区的版本git rm &lt;file&gt; git commit -m &quot;remove readme.txt&quot; # 从版本库删除文件 远程库123456789git remote add origin git@github.com:github_username/repo_name.git # 如果origin已存在，先执行git remote rm origingit pull # 将远程库对应分支fetch and mergegit remote # 显示要推送的远程库别名git push -u origin master # 将分支master推送到远程库origingit push origin &lt;branch_name&gt; # 将分支branch_name推送到远程库origin上git clone git@github.com:michaelliao/gitskills.git # 下载远程库master分支git checkout -b &lt;branch_name&gt; orgin/&lt;branch_name&gt; # 将远程分支clone到本地git branch --set-upstream &lt;branch_name&gt; origin/&lt;branch_name&gt; # 本地跟远程分支建立联系 分支管理123456789101112git branch &lt;branch_name&gt; # 从当前分支创建另一个分支git checkout &lt;branch_name&gt; # 切换分支git checkout -b &lt;name&gt; # 创建并切换分支git branch # 查看分支git merge &lt;name&gt; # 合并指定分支到当前分支git branch -d &lt;name&gt; # 删除分支git branch -D &lt;name&gt; # 强行删除分支git log --graph # 以图形方式查看提交历史git merge --no-ff -m &quot;merge with no-ff&quot; &lt;name&gt; #合并新分支， 不抹掉历史git stash # 保存当前工作区，除非有没被Git管理的文件git stash list # 查看保存的工作区git stash pop # 恢复的同时把stash内容也删了 标签管理12345678git tag v1.0 # 对当前分支打上指定标签git tag v1.1 &lt;commit_id&gt; # 对指定的 commit id 打上指定的标签git tag -a v0.1 -m &quot;version 0.1 released&quot; &lt;commit_id&gt;git show &lt;tag_name&gt; # 看指定标签的说明文字git tag -d v1.0 # 删除本地的指定标签git push origin :refs/tags/v1.0 # 删除远程上的指定标签git push origin v1.0 # 推送指定标签到远程上gt push origin --tags # 推送所有标签到远程上 自定义git123git config --global color.ui true # 允许git适当地显示不同的颜色忽略某些文件时，需要编写.gitignore；.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！ 注意 所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件、程序代码等 注意工作区和版本库（缓存区、master）之间的含义，必须先add到缓存区，再commit到master 合并的时候，有可能会产生冲突。冲突的产生是因为在合并的时候，不同分支修改了相同的位置。所以在合并的时候git不知道那个到底是你想保留的，需要手动选择想要保留的内容，解决冲突。 参考网址：廖雪峰官网Git教程Git教程首页Git 提示fatal: remote origin already exists 错误解决办法git2.9.2使用总结","tags":[{"name":"Coding","slug":"Coding","permalink":"http://yoursite.com/tags/Coding/"}]}]